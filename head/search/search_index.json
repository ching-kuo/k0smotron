{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"k0smotron - The Kubernetes control plane manager","text":"<p>k0smotron is a Kubernetes control plane manager. Deploy and run Kubernetes control planes on any existing cluster. k0smotron is well suited for</p> <ul> <li>Edge</li> <li>IoT</li> <li>Dev clusters</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To install k0smotron on your Kubernetes cluster run the following command:</p> <pre><code>kubectl apply -f https://docs.k0smotron.io/stable/install.yaml\n</code></pre>"},{"location":"#faq","title":"FAQ","text":""},{"location":"#how-is-k0smotron-different-from-typical-multi-cluster-management-solutions-such-as-tanzu-rancher-etc","title":"How is k0smotron different from typical multi-cluster management solutions such as Tanzu, Rancher etc.?","text":"<p>Most of the existing multi-cluster management solutions provision specific infrastructure for the control planes, in most cases VMs. In all of the cases we've looked at the worker plane infrastructure is also provisioned in the same infrastructure with the control plane and thus not allowing you to fully utilize the capabilities of the management cluster.</p>"},{"location":"#how-is-this-different-for-managed-kubernetes-providers","title":"How is this different for managed Kubernetes providers?","text":"<ul> <li>Control and Flexibility: k0smotron gives you full control over your cluster configurations within your existing Kubernetes cluster, offering unparalleled flexibility.</li> <li>Bring Your Own Workers: Unlike managed Kubernetes providers, k0smotron allows you to connect worker nodes from any infrastructure, providing greater freedom and compatibility.</li> <li>Cost Efficiency: By leveraging your existing Kubernetes cluster, k0smotron helps reduce costs associated with managing separate clusters or paying for additional resources.</li> <li>Homogeneous Setup: k0smotron ensures a consistent configuration across clusters, simplifying maintenance and management tasks.</li> </ul>"},{"location":"#what-is-the-relation-of-k0smotron-with-cluster-api","title":"What is the relation of k0smotron with Cluster API?","text":"<p>While k0smotron currently is a \"standalone\" controller for k0s control planes we're looking to expand this as a full Cluster API provider. Or rather set pf providers as were looking to implement both ControlPlane and Bootstrap providers.</p>"},{"location":"cluster/","title":"Creating a cluster","text":"<p>The following example creates a simple cluster named <code>k0smotron-test</code>:</p> <pre><code>cat &lt;&lt;EOF | kubectl apply -f -\napiVersion: k0smotron.io/v1beta1\nkind: Cluster\nmetadata:\n  name: k0smotron-test\nspec: null\nEOF\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#configuration-file-reference","title":"Configuration file reference","text":"<p>The default k0smotron configuration file is a YAML file that contains the following values:</p> <pre><code>apiVersion: k0smotron.io/v1beta1\nkind: Cluster\nmetadata:\nname: k0smotron-test\nspec:\nreplicas: 1\nk0sImage: k0sproject/k0s\nK0sVersion: v1.27.1-k0s.0\nservice:\ntype: NodePort\napiPort: 30443\nkonnectivityPort: 30132\npersistence:\ntype: emptyDir\ncniPlugin: kuberouter\n</code></pre>"},{"location":"configuration/#spec-key-detail","title":"<code>spec</code> Key Detail","text":"Element Description <code>replicas</code> Replicas is the desired number of replicas of the k0s control planes. If unspecified, defaults to 1. If the value is above 1, k0smotron requires kine datasource URL to be set. <code>k0sImage</code> The k0s image to be deployed. <code>K0sVersion</code> The k0s version to be deployed. <code>externalAddress</code> ExternalAddress defines k0s external address. See https://docs.k0sproject.io/stable/configuration/#specapi <code>service</code> <code>Service</code> defines the service configuration. <code>persistence</code> <code>Persistence</code> defines the persistence configuration. <code>kineDataSourceURL</code> Defines the kine datasource URL. Required for HA controlplane setup. Must be set if replicas &gt; 1. <code>cniPlugin</code> Defines the CNI plugin to be used. Possible values are KubeRouter and Calico. Uses KubeRouter by default. Cannot be modified after deploying the cluster."},{"location":"configuration/#specservice","title":"<code>spec.service</code>","text":"Element Description <code>type</code> Service type. Possible values: <code>NodePort</code>,<code>LoadBalancer</code> <code>apiPort</code> Defines the kubernetes API port. <code>konnectivityPort</code> Defines the konnectivity port."},{"location":"configuration/#specpersistence","title":"<code>spec.persistence</code>","text":"Element Description <code>type</code> Persistence type. Possible values: <code>emptyDir</code>,<code>hostPath</code>,<code>pvc</code> <code>hostPath</code> Defines the host path configuration. Will be used as is in case of <code>.spec.persistence.type</code> is <code>hostPath</code>. <code>persistentVolumeClaim</code> Defines the PVC configuration. Will be used as is in case of <code>.spec.persistence.type</code> is <code>pvc</code>."},{"location":"install/","title":"Installation","text":"<p>To install k0smotron, run the following command:</p> <pre><code>kubectl apply -f https://docs.k0smotron.io/stable/install.yaml\n</code></pre>"},{"location":"join-tokens/","title":"Join Tokens","text":"<p>You need a token to join workers to the cluster. The token embeds information that enables mutual trust between the worker and controller(s) and which allows the node to join the cluster as worker.</p> <p>To get a token, create a <code>JoinTokenRequest</code> resource:</p> <pre><code>apiVersion: k0smotron.io/v1beta1\nkind: JoinTokenRequest\nmetadata:\nname: my-token\nnamespace: default\nspec:\nclusterRef:\nname: my-cluster\nnamespace: default\n</code></pre> <p>The <code>JoinTokenRequest</code> resource will be processed by the controller and a <code>Secret</code> will be created:</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: my-token\nnamespace: default\nlabels:\nk0smotron.io/cluster: my-cluster.default\nk0smotron.io/role: worker\nk0smotron.io/token-request: my-token\ntype: Opaque\ndata:\ntoken: &lt;base64-encoded-token&gt;\n</code></pre> <p>The <code>token</code> field contains the base64-encoded token that can be used to join a worker node to the cluster.</p>"},{"location":"join-tokens/#invalidating-tokens","title":"Invalidating tokens","text":"<p>You can limit the validity period by setting the <code>expiry</code> field in the <code>JoinTokenRequest</code> resource:</p> <pre><code>apiVersion: k0smotron.io/v1beta1\nkind: JoinTokenRequest\nmetadata:\nname: my-token\nnamespace: default\nspec:\nclusterRef:\nname: my-cluster\nnamespace: default\nexpiry: 1h\n</code></pre> <p>To invalidate an issued token, delete the <code>JoinTokenRequest</code> resource:</p> <pre><code>kubectl delete jointokenrequest my-token\n</code></pre>"}]}